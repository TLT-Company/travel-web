import { sequelize } from "../config/database.js";
import {
  User,
  Customer,
  Employer,
  Tour,
  Booking,
  TaskAssignment,
  DocumentExportHistory,
  DocumentCustomer,
} from "../models/index.js";
import bcrypt from "bcryptjs";

async function seedInitialData() {
  try {
    console.log("üå± Starting to seed initial data...");

    // Create admin user
    const adminPassword = await bcrypt.hash("admin123", 10);
    const adminUser = await User.create({
      email: "admin@example.com",
      password_hash: adminPassword,
      role: "admin",
    });

    // Create employer user
    const employerPassword = await bcrypt.hash("employer123", 10);
    const employerUser = await User.create({
      email: "employer@example.com",
      password_hash: employerPassword,
      role: "employer",
    });

    // Create customer user
    const customerPassword = await bcrypt.hash("customer123", 10);
    const customerUser = await User.create({
      email: "customer@example.com",
      password_hash: customerPassword,
      role: "customer",
    });

    // Create employer profile
    const employer = await Employer.create({
      user_id: employerUser.id,
      full_name: "Nguy·ªÖn VƒÉn A",
      position: "Tour Guide",
    });

    // Create customer profile
    const customer = await Customer.create({
      user_id: customerUser.id,
      card_id: "123456789012",
      card_created_at: "2020-01-15",
      full_name: "Tr·∫ßn Th·ªã B",
      day_of_birth: "1990-05-15",
      gender: "N·ªØ",
      national: "Vi·ªát Nam",
      address: "123 ƒê∆∞·ªùng ABC, Qu·∫≠n 1, TP.HCM",
      village: "Th√¥n ABC",
      province: "TP.HCM",
      district: "Qu·∫≠n 1",
      commune: "Ph∆∞·ªùng B·∫øn Ngh√©",
      place_of_birth: "TP.HCM",
      province_code: "79",
      district_code: "760",
      commune_code: "26734",
      phone_number: "0123456789",
      id_card_number: "123456789",
      id_card_front: "/uploads/id_cards/front_123456789.jpg",
      id_card_back: "/uploads/id_cards/back_123456789.jpg",
      picture: "/uploads/pictures/customer_1.jpg",
      verified_status: "verified",
    });

    // Create additional customers
    const customer2 = await Customer.create({
      user_id: customerUser.id,
      card_id: "987654321098",
      card_created_at: "2019-06-20",
      full_name: "L√™ VƒÉn C",
      day_of_birth: "1985-08-22",
      gender: "Nam",
      national: "Vi·ªát Nam",
      address: "456 ƒê∆∞·ªùng XYZ, Qu·∫≠n 3, TP.HCM",
      village: "Th√¥n XYZ",
      province: "TP.HCM",
      district: "Qu·∫≠n 3",
      commune: "Ph∆∞·ªùng V√µ Th·ªã S√°u",
      place_of_birth: "TP.HCM",
      province_code: "79",
      district_code: "761",
      commune_code: "26737",
      phone_number: "0987654321",
      id_card_number: "987654321",
      id_card_front: "/uploads/id_cards/front_987654321.jpg",
      id_card_back: "/uploads/id_cards/back_987654321.jpg",
      picture: "/uploads/pictures/customer_2.jpg",
      verified_status: "verified",
    });

    // Create sample tours
    const tour1 = await Tour.create({
      name: "Tour ƒê√† N·∫µng - H·ªôi An 3 ng√†y 2 ƒë√™m",
      description:
        "Kh√°m ph√° v·∫ª ƒë·∫πp c·ªßa ƒê√† N·∫µng v√† ph·ªë c·ªï H·ªôi An v·ªõi c√°c ƒëi·ªÉm ƒë·∫øn n·ªïi ti·∫øng nh∆∞ B√£i bi·ªÉn M·ªπ Kh√™, B√°n ƒë·∫£o S∆°n Tr√†, Ph·ªë c·ªï H·ªôi An, C·∫ßu R·ªìng...",
      price: 2500000,
      start_date: "2024-03-15",
      end_date: "2024-03-17",
      location: "ƒê√† N·∫µng, H·ªôi An",
      created_by: adminUser.id,
    });

    const tour2 = await Tour.create({
      name: "Tour Sapa 2 ng√†y 1 ƒë√™m",
      description:
        "Tr·∫£i nghi·ªám vƒÉn h√≥a d√¢n t·ªôc v√† c·∫£nh ƒë·∫πp n√∫i r·ª´ng T√¢y B·∫Øc v·ªõi c√°c ho·∫°t ƒë·ªông trekking, thƒÉm b·∫£n l√†ng d√¢n t·ªôc, ch·ª£ phi√™n Sapa...",
      price: 1800000,
      start_date: "2024-03-20",
      end_date: "2024-03-21",
      location: "Sapa, L√†o Cai",
      created_by: adminUser.id,
    });

    const tour3 = await Tour.create({
      name: "Tour Nha Trang - ƒê√† L·∫°t 4 ng√†y 3 ƒë√™m",
      description:
        "K·∫øt h·ª£p ngh·ªâ d∆∞·ª°ng bi·ªÉn Nha Trang v√† kh√°m ph√° th√†nh ph·ªë ng√†n hoa ƒê√† L·∫°t v·ªõi c√°c ƒëi·ªÉm ƒë·∫øn nh∆∞ Vinpearl, Thung l≈©ng T√¨nh Y√™u, H·ªì Xu√¢n H∆∞∆°ng...",
      price: 3200000,
      start_date: "2024-04-10",
      end_date: "2024-04-13",
      location: "Nha Trang, ƒê√† L·∫°t",
      created_by: adminUser.id,
    });

    const tour4 = await Tour.create({
      name: "Tour Ph√∫ Qu·ªëc 3 ng√†y 2 ƒë√™m",
      description:
        "Kh√°m ph√° ƒë·∫£o ng·ªçc Ph√∫ Qu·ªëc v·ªõi c√°c b√£i bi·ªÉn ƒë·∫πp, VinWonders, Safari, v√† ·∫©m th·ª±c h·∫£i s·∫£n t∆∞∆°i ngon...",
      price: 2800000,
      start_date: "2024-04-25",
      end_date: "2024-04-27",
      location: "Ph√∫ Qu·ªëc, Ki√™n Giang",
      created_by: adminUser.id,
    });

    // Create sample bookings
    const booking1 = await Booking.create({
      customer_id: customer.id,
      tour_id: tour1.id,
      booking_date: new Date(),
      status: "confirmed",
      assigned_to: employer.id,
      note: "Kh√°ch h√†ng y√™u c·∫ßu h∆∞·ªõng d·∫´n vi√™n n√≥i ti·∫øng Anh",
    });

    const booking2 = await Booking.create({
      customer_id: customer2.id,
      tour_id: tour2.id,
      booking_date: new Date(),
      status: "pending",
      assigned_to: employer.id,
      note: "Kh√°ch h√†ng c√≥ y√™u c·∫ßu ƒë·∫∑c bi·ªát v·ªÅ ƒÉn chay",
    });

    const booking3 = await Booking.create({
      customer_id: customer.id,
      tour_id: tour3.id,
      booking_date: new Date(),
      status: "cancelled",
      assigned_to: null,
      note: "Kh√°ch h√†ng h·ªßy do l√Ω do c√° nh√¢n",
    });

    // Create task assignments
    await TaskAssignment.create({
      employer_id: employer.id,
      booking_id: booking1.id,
      assigned_at: new Date(),
      status: "in_progress",
    });

    await TaskAssignment.create({
      employer_id: employer.id,
      booking_id: booking2.id,
      assigned_at: new Date(),
      status: "new",
    });

    // Create document customers
    await DocumentCustomer.create({
      document_number: "CV-2024-001",
      customer_id: customer.id,
    });

    await DocumentCustomer.create({
      document_number: "CV-2024-002",
      customer_id: customer2.id,
    });

    await DocumentCustomer.create({
      document_number: "CV-2024-003",
      customer_id: customer.id,
    });

    // Create document export histories
    await DocumentExportHistory.create({
      kind: "customer_report",
      file_path: "/exports/customer_report_2024_01.pdf",
      file_name: "customer_report_2024_01.pdf",
      status: "success",
    });

    await DocumentExportHistory.create({
      kind: "booking_summary",
      file_path: "/exports/booking_summary_2024_01.xlsx",
      file_name: "booking_summary_2024_01.xlsx",
      status: "success",
    });

    await DocumentExportHistory.create({
      kind: "tour_statistics",
      file_path: "/exports/tour_statistics_2024_01.pdf",
      file_name: "tour_statistics_2024_01.pdf",
      status: "failed",
    });

    console.log("‚úÖ Initial data seeded successfully!");
    console.log("üìã Created:");
    console.log("  - 3 users (admin, employer, customer)");
    console.log("  - 1 employer profile");
    console.log("  - 2 customer profiles");
    console.log("  - 4 tours");
    console.log("  - 3 bookings");
    console.log("  - 2 task assignments");
    console.log("  - 3 document customers");
    console.log("  - 3 document export histories");
  } catch (error) {
    console.error("‚ùå Seeding failed:", error);
    throw error;
  } finally {
    await sequelize.close();
  }
}

// Run seeding if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  seedInitialData();
}

export { seedInitialData };
